C. Modifications in Task2.0 to create Task2.0_V2

a. Modify Task 2.0 to do the encryption from library calls rather than running frmo shell such that using content preserving hashing(i.e. no loss of information)
b. let tif = Text_in_file
 libraryCall_encrypt(tif,key) =>encryptedTif.file
 libraryCall_decrypt(tif,key) =>tif.file

 content(tif.file) is preserved in encryptedTif.file -> there is no loss in information

c. Eg md5sum is not content preserving hashing
-> Have a look at emn178.github.io/online-tools/sha256.html
-> seagl.org

d. We need content preserving hashing for the Task2.0_V2

-------------------------------------------------------------------------------------

B. Do a program on. (Each having two versions, V1=inputs from CMD and V2=inputs from file)
1. Simple add
2. Recursive.
3. Finding Prime Numbers.

------------------------------------------------------------------------------------
Work on making Python executable file

---------------------------------------------------------------------------------
Note: Each Virus behaviour implies a signature
a. mutant(VIRUS_X) -> signature_X
b. behaviour(VIRUS_X) = behaviour(mutant(VIRUS_X))

--------------------------------------------------------------------------------
A. Prepare for presentation
a. What has been done in the writeupâ€¦ will be mailed soon. It is on how to write self-modification code {processes}.
b. Create a toolBox.sh script to store names of all the registers that are being touched upon by the elf file, all the assembly instructions appearing in that elf in a file
b_1 the instructions i.e. opcode used(operation) and their frequency.
b_2 The operands used.

------------------------------------------------------------------------------------
1. Progress check questions
a. Are you able to write simple programs in assembly?
b. Are you able to compile these assembly languages into executable ELFs?
c. Are you able to disassemble ELFs back to asm code?
d. Have you thought of decompiling ELFs back to source code? (assumptions?)
e. Featuring a file: (asm_instX, asm_instY, ...., asm_instZ) -->determine signature of file

2. Some interesting material for us to get deeper and motivated
a. Brian Raiter portal: http://www.muppetlabs.com/~breadbox/software/tiny
    + for understanding the core of assembly and ABI compliant asm coding
b. Self modifying code (from 2013--> Sir will mail)
c.1 Giant-Black-Book-Computer-Viruses by Ludwig (amazon.in)
c.2 The Little Black BookofComputer Viruses (amazon.in)
d. "Learning Linux Binary Analysis" Ryan O'Neill (The ELF Master)

------------------------------------------------------------------------------------
